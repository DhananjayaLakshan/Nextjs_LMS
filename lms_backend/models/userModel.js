const mongoose = require('mongoose')
const bcrypt = require('bcrypt')
const crypto = require('crypto')

const userSchema = mongoose.Schema({

    firstName: { type: String, required: true },
    lastName: { type: String, required: true },
    user_image: { type: String, default: "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.pngegg.com%2Fen%2Fsearch%3Fq%3Duser&psig=AOvVaw3VGNVVj5frllgDVfV04u34&ust=1704339121652000&source=images&cd=vfe&opi=89978449&ved=0CBIQjRxqFwoTCKjzoJKkwIMDFQAAAAAdAAAAABAD" },
    email: { type: String, required: true, unique: true, index: true },
    mobile: { type: String, index: true },
    password: { type: String, required: true },
    roles: { type: String, default: "user" },
    profession: { type: String, required: true },
    isBlocked: { type: Boolean, default: false },
    passwordChangedAt: Date,
    passwordResetToken: String,
    passwordResetExpires: Date,
    stripe_account_id: String,
    stripe_seller: {},
    stripeSession: {},


}, { timestamps: true })

/**this middleware ensures that before saving a user document to the database, 
 * the user's password is hashed using a salt generated by bcrypt. 
 * This is a common practice for securely storing passwords in a database, 
 * enhancing security by protecting against rainbow table attacks and making it computationally expensive to crack passwords. 
 * */
userSchema.pre("save", async function (next) {

    if (!this.isModified("password")) {
        next()
    }

    const salt = await bcrypt.genSalt(10)
    this.password = await bcrypt.hash(this.password, salt)
    next()
})

/** this method facilitates the comparison of a user-entered password 
 * with the hashed password stored in the Mongoose user document, providing a secure way to authenticate users. */
userSchema.methods.isPasswordMatched = async function (enteredPassword) {
    return await bcrypt.compare(enteredPassword, this.password)
}

userSchema.methods.createPasswordResetToken = async function () {
    const resetToken = crypto.randomBytes(32).toString("hex")
    this.passwordResetToken = crypto.createHash("sha256").update(resetToken).digest("hex")
    this.passwordResetExpires = Date.now() + 30 * 60 * 1000// 10 min
    return resetToken
}


module.exports = mongoose.model("User", userSchema)